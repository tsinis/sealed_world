// Those classes are based on data from the restcountries project
// https://gitlab.com/restcountries/restcountries, which is
// licensed under the Mozilla Public License Version 2.0.

// ignore_for_file: prefer-digit-separators

part of "../../model/country/country.dart";

/// A class that represents the the United States country.
class CountryUsa extends WorldCountry {
  /// {@template sealed_world.countries_usa_constructor}}
  /// Creates a instance of [CountryUsa] (United States country).
  ///
  /// ISO 3166-1 Alpha-3 code: `USA`, ISO 3166-1 Alpha-2 code: `US`.
  /// {@endtemplate}
  const factory CountryUsa() = _UsaFactory;

  const CountryUsa._()
    : super(
        name: const CountryName(
          language: LangEng(),
          official: "United States of America",
          common: "United States",
        ),
        tld: const [".us"],
        code: "USA",
        codeNumeric: "840",
        codeShort: "US",
        cioc: "USA",
        idd: const Idd(
          root: 1,
          suffixes: [
            201,
            202,
            203,
            205,
            206,
            207,
            208,
            209,
            210,
            212,
            213,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            224,
            225,
            227,
            228,
            229,
            231,
            234,
            239,
            240,
            248,
            251,
            252,
            253,
            254,
            256,
            260,
            262,
            267,
            269,
            270,
            272,
            274,
            276,
            281,
            283,
            301,
            302,
            303,
            304,
            305,
            307,
            308,
            309,
            310,
            312,
            313,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            321,
            323,
            325,
            327,
            330,
            331,
            334,
            336,
            337,
            339,
            346,
            347,
            351,
            352,
            360,
            361,
            364,
            380,
            385,
            386,
            401,
            402,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            412,
            413,
            414,
            415,
            417,
            419,
            423,
            424,
            425,
            430,
            432,
            434,
            435,
            440,
            442,
            443,
            447,
            458,
            463,
            464,
            469,
            470,
            475,
            478,
            479,
            480,
            484,
            501,
            502,
            503,
            504,
            505,
            507,
            508,
            509,
            510,
            512,
            513,
            515,
            516,
            517,
            518,
            520,
            530,
            531,
            534,
            539,
            540,
            541,
            551,
            559,
            561,
            562,
            563,
            564,
            567,
            570,
            571,
            573,
            574,
            575,
            580,
            585,
            586,
            601,
            602,
            603,
            605,
            606,
            607,
            608,
            609,
            610,
            612,
            614,
            615,
            616,
            617,
            618,
            619,
            620,
            623,
            626,
            628,
            629,
            630,
            631,
            636,
            641,
            646,
            650,
            651,
            657,
            660,
            661,
            662,
            667,
            669,
            678,
            681,
            682,
            701,
            702,
            703,
            704,
            706,
            707,
            708,
            712,
            713,
            714,
            715,
            716,
            717,
            718,
            719,
            720,
            724,
            725,
            727,
            730,
            731,
            732,
            734,
            737,
            740,
            743,
            747,
            754,
            757,
            760,
            762,
            763,
            765,
            769,
            770,
            772,
            773,
            774,
            775,
            779,
            781,
            785,
            786,
            801,
            802,
            803,
            804,
            805,
            806,
            808,
            810,
            812,
            813,
            814,
            815,
            816,
            817,
            818,
            828,
            830,
            831,
            832,
            843,
            845,
            847,
            848,
            850,
            854,
            856,
            857,
            858,
            859,
            860,
            862,
            863,
            864,
            865,
            870,
            872,
            878,
            901,
            903,
            904,
            906,
            907,
            908,
            909,
            910,
            912,
            913,
            914,
            915,
            916,
            917,
            918,
            919,
            920,
            925,
            928,
            929,
            930,
            931,
            934,
            936,
            937,
            938,
            940,
            941,
            947,
            949,
            951,
            952,
            954,
            956,
            959,
            970,
            971,
            972,
            973,
            975,
            978,
            979,
            980,
            984,
            985,
            989,
          ],
        ),
        altSpellings: const ["US", "USA", "United States of America"],
        continent: const Americas(),
        subregion: const NorthAmerica(),
        latLng: const LatLng(38, -97),
        bordersCodes: const ["Can", "Mex"],
        areaMetric: 9372610,
        emoji: "ðŸ‡ºðŸ‡¸",
        maps: const Maps(
          googleMaps: "e8M246zY4BSjkjAv6",
          openStreetMaps: "relation/148838#map=2/20.6/-85.8",
        ),
        population: 329484123,
        gini: const Gini(year: 2018, coefficient: 41.4),
        fifa: "USA",
        car: const Car(sign: "USA"),
        timezones: const [
          "UTC-12:00",
          "UTC-11:00",
          "UTC-10:00",
          "UTC-09:00",
          "UTC-08:00",
          "UTC-07:00",
          "UTC-06:00",
          "UTC-05:00",
          "UTC-04:00",
          "UTC+10:00",
          "UTC+12:00",
        ],
        startOfWeek: Weekday.sunday,
        postalCode: const PostalCode(
          format: "#####-####",
          regExpPattern: r"^\d{5}(-\d{4})?$",
        ),
      );
  @override
  List<FiatCurrency> get currencies => const [FiatUsd()];
  @override
  CapitalInfo get capitalInfo => const CapitalInfo(
    capital: Capital("Washington, D.C."),
    latLng: LatLng(38.89, -77.05),
  );
  @override
  List<RegionalBloc> get regionalBlocs => const [BlocNAFTA()];
  @override
  List<Demonyms> get demonyms => const [
    Demonyms(language: LangEng(), female: "American", male: "American"),
    Demonyms(language: LangFra(), female: "AmÃ©ricaine", male: "AmÃ©ricain"),
  ];
  @override
  List<CountryName> get namesNative => const [
    CountryName(
      language: LangEng(),
      official: "United States of America",
      common: "United States",
    ),
  ];
  @override
  List<NaturalLanguage> get languages => const [LangEng()];
}

extension type const _UsaFactory._(CountryUsa _) implements CountryUsa {
  const _UsaFactory() : this._(const CountryUsa._());
}
